(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{460:function(e,a,v){"use strict";v.r(a);var _=v(15),s=Object(_.a)({},(function(){var e=this,a=e.$createElement,v=e._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"webpack-面试题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webpack-面试题"}},[e._v("#")]),e._v(" "),v("code",[e._v("Webpack")]),e._v(" 面试题")]),e._v(" "),v("h2",{attrs:{id:"谈谈-webpack-原理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#谈谈-webpack-原理"}},[e._v("#")]),e._v(" 谈谈 webpack 原理")]),e._v(" "),v("ul",[v("li",[e._v("初始化参数")]),e._v(" "),v("li",[e._v("开始编译：初始化 "),v("code",[e._v("compiler")]),e._v(" 对象")]),e._v(" "),v("li",[e._v("确定入口")]),e._v(" "),v("li",[e._v("编译模板：调用 "),v("code",[e._v("loader")])]),e._v(" "),v("li",[e._v("完成模板编译：得到 "),v("code",[e._v("loader")]),e._v(" 翻译后的所有模块")]),e._v(" "),v("li",[e._v("输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 "),v("code",[e._v("chunk")]),e._v("，再把每个 "),v("code",[e._v("chunk")]),e._v(" 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会")]),e._v(" "),v("li",[e._v("输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统")])]),e._v(" "),v("h2",{attrs:{id:"loader-作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#loader-作用"}},[e._v("#")]),e._v(" "),v("code",[e._v("loader")]),e._v(" 作用")]),e._v(" "),v("ul",[v("li",[e._v("加载文件")]),e._v(" "),v("li",[e._v("转换文件")])]),e._v(" "),v("h2",{attrs:{id:"plugins-作用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#plugins-作用"}},[e._v("#")]),e._v(" "),v("code",[e._v("plugins")]),e._v(" 作用")]),e._v(" "),v("ul",[v("li",[e._v("打包优化")]),e._v(" "),v("li",[e._v("资源管理")]),e._v(" "),v("li",[e._v("注入环境变量")]),e._v(" "),v("li",[e._v("在 "),v("code",[e._v("Webpack")]),e._v(" 运行的生命周期中会广播出许多事件，"),v("code",[e._v("Plugin")]),e._v(" 可以监听这些事件，在合适的时机通过 "),v("code",[e._v("Webpack")]),e._v(" 提供的 "),v("code",[e._v("API")]),e._v(" 改变输出结果")])]),e._v(" "),v("h2",{attrs:{id:"webpack-的生命周期"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webpack-的生命周期"}},[e._v("#")]),e._v(" webpack 的生命周期")]),e._v(" "),v("ol",[v("li",[e._v("entry-options：option初始化")]),e._v(" "),v("li",[e._v("compile：开始编译")]),e._v(" "),v("li",[e._v("make：分析入口文件创建模板对象(compile中触发make事件并调用addEntry找到入口js文件，进行下一步的模块绑定)")]),e._v(" "),v("li",[e._v("build-module：构建模块")]),e._v(" "),v("li",[e._v("after-compile：完成所有模块构建结束编译过程")]),e._v(" "),v("li",[e._v("emit：compiler开始输出生成的assets、插件；有最后的机会修改输出内容")]),e._v(" "),v("li",[e._v("after-emit：输出完成")])]),e._v(" "),v("h2",{attrs:{id:"webpack-性能优化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webpack-性能优化"}},[e._v("#")]),e._v(" webpack 性能优化")]),e._v(" "),v("h4",{attrs:{id:"开发环境"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#开发环境"}},[e._v("#")]),e._v(" 开发环境")]),e._v(" "),v("ol",[v("li",[e._v("优化代码调试(选择合适 "),v("code",[e._v("source-map")]),e._v(")")])]),e._v(" "),v("div",{staticClass:"language- line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[e._v("   - source-map: 外部\n   - inline-source-map: 内联；`内联和外部的区别：外部生成了文件，内联没有，内联构建速度会更快`\n   - hidden-source-map: 外部\n   - evel-source-map: 内联；`eval-source-map 和 inline-source-map 的区别：inline-source-map只会生成一个内联 sourceMap，eval-source-map 每个文件都会生成一个 sourceMap`\n   - nosource-source-map: 外部\n   - cheap-source-map: 外部\n   - cheap-module-source-map: 外部\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br"),v("span",{staticClass:"line-number"},[e._v("3")]),v("br"),v("span",{staticClass:"line-number"},[e._v("4")]),v("br"),v("span",{staticClass:"line-number"},[e._v("5")]),v("br"),v("span",{staticClass:"line-number"},[e._v("6")]),v("br"),v("span",{staticClass:"line-number"},[e._v("7")]),v("br")])]),v("ol",{attrs:{start:"2"}},[v("li",[v("p",[e._v("HMR"),v("br"),e._v(" "),v("code",[e._v("devServer: { hot: true }")]),v("br"),e._v("\n作用：一个模块发生变化，只会重新打包这一个模块（而不是打包所有模块）极大提升构建速度")]),e._v(" "),v("ul",[v("li",[e._v("样式文件：可以使用 HMR 功能：因为 style-loader 内部实现了")]),e._v(" "),v("li",[e._v("js 文件：默认不能使用 HMR 功能 --\x3e 需要修改 js 代码，添加支持 HMR 功能的代码"),v("br"),e._v("\n注意：HMR 功能对 js 的处理，只能处理非入口 js 文件的其它文件")]),e._v(" "),v("li",[e._v("html 文件：默认不能使用 HMR 功能，同时会导致问题：html 文件不能热更新了(不用做 HMR)"),v("br"),e._v("\n解决：修改入口文件，将 html 引入")])])]),e._v(" "),v("li",[v("p",[e._v("Dll")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("DllPlugin")]),e._v("：将模块预先编译，只需编译一次（不易变的文件，一般为各类库，如：vue.js, axios。需要在 externals 中声明 build 被 DllPlugin 预编译的库）")]),e._v(" "),v("li",[v("code",[e._v("DllReferencePlugin")]),e._v("：将预先编译好的模块关联到当前编译中 (将通过 DllPlugin 编译好的文件引入到 index.html 中)")])])]),e._v(" "),v("li",[v("p",[e._v("开启缓存")])])]),e._v(" "),v("ul",[v("li",[e._v("babel 缓存\n"),v("ul",[v("li",[v("code",[e._v("cacheDirectory：true")]),v("br"),e._v("\n|- 让第二次打包构建速度更快")])])]),e._v(" "),v("li",[e._v("文件资源缓存\n"),v("ul",[v("li",[v("em",[v("code",[e._v("hash")])]),e._v("：每次 webpack 构建时会生成一个唯一的 hash 值"),v("br"),e._v("\n问题：因为 js 和 css 同时使用一个 hash 值"),v("br"),e._v("\n|- 如果重新打包，会导致所有缓存失效。（可能我却只改动一个文件）")]),e._v(" "),v("li",[v("em",[v("code",[e._v("chunkhash")])]),e._v("：根据 chunk 生成的 hash 值。如果打包来源于同一个 chunk，那么 hash 值就一样"),v("br"),e._v("\n问题：js 和 css 的 hash 值还是一样的"),v("br"),e._v("\n|- 因为 css 是在 js 中被引入的，所以同属于一个 chunk")]),e._v(" "),v("li",[v("em",[v("code",[e._v("contenthash")])]),e._v("：根据文件的内容生成 hash 值。不同文件 hash 值一定不一样"),v("br"),e._v("\n|- 让代码上线运行缓存更好使用")])])])]),e._v(" "),v("ol",{attrs:{start:"5"}},[v("li",[v("p",[e._v("开启多线程")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("HappyPack")]),e._v("：多线程编译，加快编译速度(加快 loader 的编译速度)，不建议与 thread-loader 一起使用")]),e._v(" "),v("li",[v("code",[e._v("thread-loader")]),e._v("：把这个 loader 放置在其他 loader 之前， 放置在这个 loader 之后的 loader 就会在一个单独的 worker 池(worker pool)中运行")])])]),e._v(" "),v("li",[v("p",[e._v("使用 oneOf 匹配 loader")])]),e._v(" "),v("li",[v("p",[e._v("tree shaking")]),e._v(" "),v("ul",[v("li",[e._v("去除无用代码")]),e._v(" "),v("li",[e._v("前提：1、必须使用 es6 模块化；2、开启 production 环境")]),e._v(" "),v("li",[e._v("作用：减少代码体积")]),e._v(" "),v("li",[e._v("在 "),v("code",[e._v("package.json")]),e._v(" 中配置")])]),e._v(" "),v("div",{staticClass:"language-js line-numbers-mode"},[v("pre",{pre:!0,attrs:{class:"language-js"}},[v("code",[v("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sideEffects"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v(" 所有代码都没有副作用（都可以进行tree shaking）\n  问题：可能会把css "),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v(" @babel"),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("polyfill（副作用）文件干掉\n"),v("span",{pre:!0,attrs:{class:"token string"}},[e._v('"sideEffects"')]),v("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),v("span",{pre:!0,attrs:{class:"token string"}},[e._v('"*.css"')]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n")])]),e._v(" "),v("div",{staticClass:"line-numbers-wrapper"},[v("span",{staticClass:"line-number"},[e._v("1")]),v("br"),v("span",{staticClass:"line-number"},[e._v("2")]),v("br"),v("span",{staticClass:"line-number"},[e._v("3")]),v("br")])])]),e._v(" "),v("li",[v("p",[e._v("多入口打包")])])]),e._v(" "),v("h4",{attrs:{id:"生产环境"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#生产环境"}},[e._v("#")]),e._v(" 生产环境")]),e._v(" "),v("ol",[v("li",[e._v("比开发环境多一个文件压缩\n"),v("ul",[v("li",[v("code",[e._v("uglifyjs-webpack-plugin")]),e._v("：用于 js 压缩")]),e._v(" "),v("li",[v("code",[e._v("mini-css-extract-plugin")]),e._v("：可以将样式文件从 bundle.js 抽离出来一个文件")]),e._v(" "),v("li",[v("code",[e._v("optimize-css-assets-webpack-plugin")]),e._v("：css 压缩，主要使用 cssnano 压缩器")])])]),e._v(" "),v("li",[e._v("其余内容同上（开发环境）")])]),e._v(" "),v("h2",{attrs:{id:"webpack-常用的-plugin-和-loader"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webpack-常用的-plugin-和-loader"}},[e._v("#")]),e._v(" webpack 常用的 plugin 和 loader")]),e._v(" "),v("h3",{attrs:{id:"常用的-loader"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用的-loader"}},[e._v("#")]),e._v(" 常用的 loader")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("file-loader")]),e._v("：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件")]),e._v(" "),v("li",[v("code",[e._v("url-loader")]),e._v("：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去")]),e._v(" "),v("li",[v("code",[e._v("source-map-loader")]),e._v("：加载额外的 Source Map 文件，以方便断点调试")]),e._v(" "),v("li",[v("code",[e._v("image-loader")]),e._v("：加载并且压缩图片文件")]),e._v(" "),v("li",[v("code",[e._v("babel-loader")]),e._v("：把 ES6 转换成 ES5")]),e._v(" "),v("li",[v("code",[e._v("css-loader")]),e._v("：加载 CSS，支持模块化、压缩、文件导入等特性")]),e._v(" "),v("li",[v("code",[e._v("style-loader")]),e._v("：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。")]),e._v(" "),v("li",[v("code",[e._v("eslint-loader")]),e._v("：通过 ESLint 检查 JavaScript 代码")])]),e._v(" "),v("h3",{attrs:{id:"常用的-plugin"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用的-plugin"}},[e._v("#")]),e._v(" 常用的 plugin")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("webpack-merge")]),e._v("：用于合并 webpack 的公共配置和环境配置(合并 webpack.config.js 和 webpack.development.js 或者 webpack.production.js)")]),e._v(" "),v("li",[v("code",[e._v("yargs-parser")]),e._v(": 用于将我们的 npm scripts 中的命令行参数转换成键值对的形式如 "),v("code",[e._v("--mode development")]),e._v(" 会被解析成键值对的形式 "),v("code",[e._v('mode: "development"')]),e._v("，便于在配置文件中获取参数")]),e._v(" "),v("li",[v("code",[e._v("clean-webpack-plugin")]),e._v(": 用于清除本地文件，在进行生产环境打包的时候，如果不清除 dist 文件夹，那么每次打包都会生成不同的 js 文件或者 css 文件堆积在文件夹中，因为每次打包都会生成不同的 hash 值导致每次打包生成的文件名与上次打包不一样不会覆盖上次打包留下来的文件")]),e._v(" "),v("li",[v("code",[e._v("progress-bar-webpack-plugin")]),e._v(": 打包编译的时候以进度条的形式反馈打包进度")]),e._v(" "),v("li",[v("code",[e._v("webpack-build-notifier")]),e._v(": 当你打包之后切换到别的页面的时候，完成时会在本地系统弹出一个提示框告知你打包结果(成功或失败或警告)")]),e._v(" "),v("li",[v("code",[e._v("html-webpack-plugin")]),e._v(":  自动生成 html,并默认将打包生成的 js、css 引入到 html 文件中")]),e._v(" "),v("li",[v("code",[e._v("mini-css-extract-plugin")]),e._v(": webpack 打包样式文件中的默认会把样式文件代码打包到 bundle.js 中，mini-css-extract-plugin 这个插件可以将样式文件从 bundle.js 抽离出来一个文件，并且支持 chunk css")]),e._v(" "),v("li",[v("code",[e._v("add-asset-html-webpack-plugin")]),e._v(": 从命名可以看出，它的作用是可以将静态资源 css 或者 js 引入到 html-webpack-plugin 生成的 html 文件中")]),e._v(" "),v("li",[v("code",[e._v("uglifyjs-webpack-plugin")]),e._v(":  代码丑化，用于 js 压缩(可以调用系统的线程进行多线程压缩，优化 webpack 的压缩速度)")]),e._v(" "),v("li",[v("code",[e._v("optimize-css-assets-webpack-plugin")]),e._v(": css 压缩，主要使用 cssnano 压缩器(webpack4 的执行环境内置了 cssnano，所以不用安装)")]),e._v(" "),v("li",[v("code",[e._v("friendly-errors-webpack-plugin")]),e._v(":  能够更好在终端看到 webapck 运行的警告和错误")]),e._v(" "),v("li",[v("code",[e._v("happypack")]),e._v(":  多线程编译，加快编译速度(加快 loader 的编译速度)，注意，thread-loader 不可以和 mini-css-extract-plugin 结合使用")]),e._v(" "),v("li",[v("code",[e._v("splitChunks")]),e._v(": CommonChunkPlugin 的后世，用于对 bundle.js 进行 chunk 切割(webpack 的内置插件)")]),e._v(" "),v("li",[v("code",[e._v("DllPlugin")]),e._v(": 将模块预先编译，它会在第一次编译的时候将配置好的需要预先编译的模块编译在缓存中，第二次编译的时候，解析到这些模块就直接使用缓存，而不是去编译这些模块(webpack 的内置插件)")]),e._v(" "),v("li",[v("code",[e._v("DllReferencePlugin")]),e._v(": 将预先编译好的模块关联到当前编译中，当 webpack 解析到这些模块时，会直接使用预先编译好的模块(webpack 的内置插件)")]),e._v(" "),v("li",[v("code",[e._v("HotModuleReplacementPlugin")]),e._v(": 实现局部热加载(刷新)，区别与在 webpack-dev-server 的全局刷新(webpack 的内置插件)")])]),e._v(" "),v("h2",{attrs:{id:"webpack-和-gulp、grunt-的不同"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webpack-和-gulp、grunt-的不同"}},[e._v("#")]),e._v(" "),v("code",[e._v("Webpack")]),e._v(" 和 "),v("code",[e._v("Gulp、Grunt")]),e._v(" 的不同")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("Gulp、Grunt")]),e._v(" "),v("ul",[v("li",[e._v("轻量化的任务")]),e._v(" "),v("li",[e._v("将打包各个阶段称为 "),v("code",[e._v("task")]),e._v("，需要开发者自己去调用打包中各个阶段生成文件之后的 "),v("code",[e._v("task")]),e._v(" 任务（串行执行）")])])]),e._v(" "),v("li",[v("code",[e._v("Webpack")]),e._v(" "),v("ul",[v("li",[e._v("打包大型应用")]),e._v(" "),v("li",[v("code",[e._v("Webpack")]),e._v(" 打包过程中会发布各个事件，开发者只要在这些事件阶段中通过 "),v("code",[e._v("Webpack")]),e._v(" 提供的 "),v("code",[e._v("API")]),e._v(" 修改 编译产物。不需要开发者掌握整个打包流程中各个阶段如何工作（管理好自己需要管理的那部分即可）")])])])]),e._v(" "),v("h2",{attrs:{id:"如何看待-webpack-和-rollup"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何看待-webpack-和-rollup"}},[e._v("#")]),e._v(" 如何看待 "),v("code",[e._v("Webpack")]),e._v(" 和 "),v("code",[e._v("Rollup")])]),e._v(" "),v("ul",[v("li",[v("code",[e._v("Webpack")]),e._v(" 是大型应用的打包，输出大量文件以及它们之间如何引用")]),e._v(" "),v("li",[v("code",[e._v("rollup")]),e._v(" 是 "),v("code",[e._v("JavaScript")]),e._v(" 类库的打包（注重最终输出一个 "),v("code",[e._v("js")]),e._v(" 文件）")])]),e._v(" "),v("h2",{attrs:{id:"webpack-情景题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#webpack-情景题"}},[e._v("#")]),e._v(" webpack 情景题")]),e._v(" "),v("h3",{attrs:{id:"如果要将-vue-文件中的-css-全部提取到一个-css-文件中-为什么使用-plugin-而不是-loader"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如果要将-vue-文件中的-css-全部提取到一个-css-文件中-为什么使用-plugin-而不是-loader"}},[e._v("#")]),e._v(" 如果要将 "),v("code",[e._v(".vue")]),e._v(" 文件中的 "),v("code",[e._v("css")]),e._v(" 全部提取到一个 "),v("code",[e._v(".css")]),e._v(" 文件中，为什么使用 "),v("code",[e._v("plugin")]),e._v("，而不是 "),v("code",[e._v("loader")]),e._v("？")]),e._v(" "),v("p",[e._v("答："),v("code",[e._v("plugin")]),e._v(" 可以在 "),v("code",[e._v("Webpack")]),e._v(" 的 生命周期中执行，可以获取到编译完成后的所有文件，在合适的时机通过 "),v("code",[e._v("Webpack")]),e._v(" 提供的 "),v("code",[e._v("API")]),e._v(" 改变输出结果。"),v("code",[e._v("loader")]),e._v(" 用来加载和编译转换文件，不适合做文件内容抽取和合并")])])}),[],!1,null,null,null);a.default=s.exports}}]);