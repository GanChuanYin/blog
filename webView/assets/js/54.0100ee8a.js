(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{471:function(v,_,e){"use strict";e.r(_);var t=e(15),i=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"git-的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-的使用"}},[v._v("#")]),v._v(" Git 的使用")]),v._v(" "),e("h2",{attrs:{id:"初始化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[v._v("#")]),v._v(" 初始化")]),v._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("div",{staticClass:"highlight-lines"},[e("br"),e("div",{staticClass:"highlighted"},[v._v(" ")]),e("br")]),e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("# cd 到文件夹中\ngit init\n")])]),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[v._v("1")]),e("br"),e("span",{staticClass:"line-number"},[v._v("2")]),e("br")])]),e("h2",{attrs:{id:"基本使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本使用"}},[v._v("#")]),v._v(" 基本使用")]),v._v(" "),e("p",[e("code",[v._v("Git")]),v._v("设置")]),v._v(" "),e("blockquote",[e("p",[v._v("用户提交时，会被提交的信息")])]),v._v(" "),e("ul",[e("li",[e("code",[v._v('git config --global user.name "au"')]),v._v("：设置提交代码时的用户名")]),v._v(" "),e("li",[e("code",[v._v("git config --global user.email au@163.com")]),v._v("：设置提交代码时的用户邮箱")])]),v._v(" "),e("p",[v._v("分支操作")]),v._v(" "),e("blockquote",[e("p",[v._v("查看当前分支及分支切换")])]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git branch")]),v._v("：查看本地分支，分支前带有 "),e("code",[v._v("*")]),v._v(" 号的时当前所在分支")]),v._v(" "),e("li",[e("code",[v._v("git branch [name]")]),v._v("：已当前分支为基准创建名字为 "),e("code",[v._v("[name]")]),v._v(" 的新分支，创建完成后，默认分支切换到 "),e("code",[v._v("[name]")]),v._v(" 分支,"),e("br"),v._v("\n例如： "),e("code",[v._v("git branch dev")]),v._v("：创建"),e("code",[v._v("dev")]),v._v("分支")]),v._v(" "),e("li",[e("code",[v._v("git branch -d [name]")]),v._v("：删除 "),e("code",[v._v("[name]")]),v._v(" 分支，"),e("br"),v._v("\n例如："),e("code",[v._v("git branck -d dev")]),v._v(", 删除 "),e("code",[v._v("dev")]),v._v(" 分支，如果删除失败，一般是需要切换到其它分支，再删除需要删除的分支")]),v._v(" "),e("li",[e("code",[v._v("git checkout [name]")]),v._v("：分支切换到 "),e("code",[v._v("name")]),v._v(" 分支，"),e("br"),v._v("\n例如："),e("code",[v._v("git checkout dev")]),v._v(",切换到 "),e("code",[v._v("dev")]),v._v(" 分支")])]),v._v(" "),e("p",[v._v("代码提交")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git add .")]),v._v("：将文件提交到暂存区，"),e("code",[v._v(".")]),v._v("代表全部文件（除了"),e("code",[v._v(".gitignore")]),v._v(" 忽略的文件）")]),v._v(" "),e("li",[e("code",[v._v("git commit -m 'xxxx'")]),v._v("：将暂存区的文件提交到分支，"),e("code",[v._v("xxx")]),v._v("是提交信息")]),v._v(" "),e("li",[e("code",[v._v("git status")]),v._v("：查看工作区和暂存区的状态（工作区就是你屏幕上能看到的文件，暂存区就是被 "),e("code",[v._v("git")]),v._v(" 暂时管理的那部分状态文件）")]),v._v(" "),e("li",[e("code",[v._v("git log")]),v._v(": 查看提交记录，按回车加载下一条记录，输入 "),e("code",[v._v("q")]),v._v(" 退出查看")]),v._v(" "),e("li",[e("code",[v._v("git push origin master")]),v._v("：将本地 "),e("code",[v._v("master")]),v._v(" 分支 推送到 远程("),e("code",[v._v("origin")]),v._v(") "),e("code",[v._v("master")]),v._v(" 分支，原本写法是"),e("code",[v._v("git push origin master:master")]),v._v("("),e("code",[v._v("git push <远程主机名> <本地分支名>:<远程分支名>")]),v._v(")")])]),v._v(" "),e("p",[v._v("拉取代码")]),v._v(" "),e("blockquote",[e("p",[v._v("第一次克隆项目，以及在远程代码更新后，更新代码到本地(提交代码前如有变动执行 git pull )")])]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git clone <repo>")]),v._v("：克隆仓库到本地，"),e("br"),v._v("\n例如："),e("code",[v._v("git clone git@github.com:coderlyu/vite-frontend-template.git")])]),v._v(" "),e("li",[e("code",[v._v("git pull")]),v._v("：拉取代码")])]),v._v(" "),e("p",[v._v("文件暂存")]),v._v(" "),e("blockquote",[e("p",[v._v("常用在当前分支开发未完成，要切换到别的分支修复 bug 时")])]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git stash")]),v._v("：暂存（存储在本地，并将项目本次操作还原）")]),v._v(" "),e("li",[e("code",[v._v("git stash pop")]),v._v("：使用上一次暂存，并将这个暂存删除，使用该命令后，如果有冲突，终端会显示")]),v._v(" "),e("li",[e("code",[v._v("git stash list")]),v._v("：查看所有的暂存")]),v._v(" "),e("li",[e("code",[v._v("git stash clear")]),v._v("：清空所有的暂存")]),v._v(" "),e("li",[e("code",[v._v("git stash drop [<stash>]")]),v._v("：删除某一个暂存，在中括号里面放置需要删除的暂存 ID")])]),v._v(" "),e("p",[v._v("标签操作")]),v._v(" "),e("blockquote",[e("p",[v._v("常用来对某个已发布的版本进行打标签")])]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git tag")]),v._v(" 或 "),e("code",[v._v("git tag -l")]),v._v("：查看本地分支标签")]),v._v(" "),e("li",[e("code",[v._v("git tag [标签名]")]),v._v("：给当前分支打标签，"),e("br"),v._v("\n例如："),e("code",[v._v("git tag v1.0.0")]),v._v(",给当前分支打上 "),e("code",[v._v("v1.0.0")]),v._v(" 标签")]),v._v(" "),e("li",[e("code",[v._v("git tag --delete [标签名]")]),v._v("：删除本地某个标签，"),e("br"),v._v("\n例如："),e("code",[v._v("git tag --delete v1.0.0")]),v._v(", 删除"),e("code",[v._v("v1.0.0")]),v._v("这个标签")])]),v._v(" "),e("h2",{attrs:{id:"高级用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高级用法"}},[v._v("#")]),v._v(" 高级用法")]),v._v(" "),e("h3",{attrs:{id:"关联远程库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关联远程库"}},[v._v("#")]),v._v(" 关联远程库")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git remote -v")]),v._v("：查看已关联的远程库")]),v._v(" "),e("li",[e("code",[v._v("git remote show [remote]")]),v._v("：显示某个远程仓库的信息")]),v._v(" "),e("li",[e("code",[v._v("git remote add [shortname] [url]")]),v._v("：添加远程版本库，"),e("br"),v._v("\n例如："),e("code",[v._v("git remote add origin git@github.com:coderlyu/vite-frontend-template.git")]),v._v("，添加一个名字为："),e("code",[v._v("origin")]),v._v("，地址为："),e("code",[v._v("git@github.com:coderlyu/vite-frontend-template.git")]),v._v(" 的远程库")]),v._v(" "),e("li",[e("code",[v._v("git remote rm [name]")]),v._v(": 删除关联名字为 "),e("code",[v._v("[name]")]),v._v(" 的远程库")])]),v._v(" "),e("h3",{attrs:{id:"强制覆盖远程库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强制覆盖远程库"}},[v._v("#")]),v._v(" 强制覆盖远程库")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git push origin master[:master] --force")]),v._v(": 本地 "),e("code",[v._v("master")]),v._v(" 分支强制覆盖 远程 "),e("code",[v._v("master")]),v._v(" 分支，"),e("br"),v._v("\n例如："),e("code",[v._v("git push origin master --force")])])]),v._v(" "),e("h3",{attrs:{id:"版本回退"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[v._v("#")]),v._v(" 版本回退")]),v._v(" "),e("h4",{attrs:{id:"_1-git-reset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-git-reset"}},[v._v("#")]),v._v(" 1. git reset")]),v._v(" "),e("p",[v._v("作用是修改 "),e("code",[v._v("HEAD")]),v._v(" 的位置，即将 "),e("code",[v._v("HEAD")]),v._v(" 指向的位置改变为之前存在的某个版本，"),e("code",[v._v("reset")]),v._v(" 之后，"),e("strong",[v._v("目标版本之后的版本不见了")]),e("br"),v._v("\n例如：")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git reset --hard [hash]")]),v._v("：回退到 "),e("code",[v._v("[hash]")]),v._v(" 之前的版本，"),e("code",[v._v("hash")]),v._v(" 为提交记录的哈希值(一般取前四位)，"),e("br"),v._v("\n例如："),e("code",[v._v("git reset --hard 5d50")]),v._v("，回退到提交记录哈希值为"),e("code",[v._v("5d50")]),v._v("前版本")])]),v._v(" "),e("p",[e("code",[v._v("reset")]),v._v(" 成功后一般需要将当前更改强制覆盖远程， "),e("code",[v._v("git push -f origin master")]),v._v("，此时因为远程分支和本地分支不在同一个版本，需要将远程的覆盖，所以加上 "),e("code",[v._v("-f")]),v._v("("),e("code",[v._v("--force")]),v._v("的简写)")]),v._v(" "),e("h4",{attrs:{id:"_2-git-revert"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-git-revert"}},[v._v("#")]),v._v(" 2. git revert")]),v._v(" "),e("p",[v._v("用于“反做”某一个版本，以达到撤销该版本的修改的目的，所有提交记录都可以看到，不会像 "),e("code",[v._v("reset")]),v._v(" 一样把后面的提交信息删除"),e("br"),v._v("\n例如：如果我们想撤销之前的某一版本，但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git revert -n [hash]")]),v._v("：不需要 "),e("code",[v._v("[hash]")]),v._v(" 这次提交的操作"),e("br"),v._v("\n例如："),e("code",[v._v("git revert -n 5d50")]),v._v(",表示不需要提交记录哈希值为 "),e("code",[v._v("5d50")]),v._v(" 这次的操作，同时 "),e("code",[v._v("5d50")]),v._v(" 这条记录还在，只是不需要这次提交做的更改")])]),v._v(" "),e("p",[e("code",[v._v("revert")]),v._v(" 成功后一般也需要将当前更改强制覆盖远程， "),e("code",[v._v("git push -f origin master")]),v._v("，此时因为远程分支和本地分支不在同一个版本，需要将远程的覆盖，所以加上 "),e("code",[v._v("-f")]),v._v("("),e("code",[v._v("--force")]),v._v("的简写)")]),v._v(" "),e("h3",{attrs:{id:"merge-和-rebase"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#merge-和-rebase"}},[v._v("#")]),v._v(" merge 和 rebase")]),v._v(" "),e("ol",[e("li",[v._v("merge")])]),v._v(" "),e("p",[v._v("需要合并的两个分支，会形成一个新的 commit 提交(比如："),e("code",[v._v("Merge branch 'dev'")]),v._v(" 的提交记录)"),e("br"),v._v("\n如果在可视化界面上查看的话，可以看到合并的分支和被合并的分支有交集")]),v._v(" "),e("p",[v._v("从分支 "),e("code",[v._v("dev")]),v._v(" 合并到分支 "),e("code",[v._v("master")])]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git checkout master")]),v._v("，切换到 "),e("code",[v._v("master")]),v._v(" 分支(该分支是你合并的分支或者说保存的分支)")]),v._v(" "),e("li",[e("code",[v._v("git merge dev")]),v._v("，"),e("code",[v._v("dev")]),v._v(" 分支合并到 "),e("code",[v._v("master")]),v._v(" 分支，一般来说合并完成后，"),e("code",[v._v("dev")]),v._v(" 分支可以被删除，同时如果有新的开发需求，继续从 "),e("code",[v._v("master")]),v._v(" 分支创建新的分支开发")])]),v._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[v._v("rebase")])]),v._v(" "),e("p",[v._v("需要合并的两个分支, 不会形成一个新的 commit 提交"),e("br"),v._v("\n如果在可视化界面上查看的话，合并和被合并的分支是在一条线上")]),v._v(" "),e("p",[v._v("从分支 "),e("code",[v._v("dev")]),v._v(" 合并到分支 "),e("code",[v._v("master")])]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git checkout master")]),v._v("，切换到 "),e("code",[v._v("master")]),v._v(" 分支(该分支是你合并的分支或者说保存的分支)")]),v._v(" "),e("li",[e("code",[v._v("git rebase dev")]),v._v("，"),e("code",[v._v("dev")]),v._v(" 分支合并到 "),e("code",[v._v("master")]),v._v(" 分支")])]),v._v(" "),e("h3",{attrs:{id:"配置-git-ssh"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置-git-ssh"}},[v._v("#")]),v._v(" 配置 Git ssh")]),v._v(" "),e("blockquote",[e("p",[v._v("使用 https 克隆每次 fetch 和 push 代码都需要输入账号和密码；ssh 默认是每次 fetch 和 push 代码都不需要输入账号和密码")])]),v._v(" "),e("ol",[e("li",[e("p",[v._v("设置 "),e("code",[v._v("user.name")]),v._v(" 和 "),e("code",[v._v("user.email")])])]),v._v(" "),e("li",[e("p",[v._v("检查是否已经存在 "),e("code",[v._v("ssh")])]),v._v(" "),e("ul",[e("li",[v._v("mac:\n"),e("ol",[e("li",[e("code",[v._v("cd ./.shh")])]),v._v(" "),e("li",[e("code",[v._v("ls")])]),v._v(" "),e("li",[v._v("查看是否有 "),e("code",[v._v("id_isa")]),v._v(" 和 "),e("code",[v._v("id_isa.pub")])])])]),v._v(" "),e("li",[v._v("windows:\n"),e("ol",[e("li",[e("code",[v._v("cd ./.shh")])]),v._v(" "),e("li",[e("code",[v._v("dir")])]),v._v(" "),e("li",[v._v("查看是否有 "),e("code",[v._v("id_isa")]),v._v(" 和 "),e("code",[v._v("id_isa.pub")])])])])])]),v._v(" "),e("li",[e("p",[v._v("生成密钥")]),v._v(" "),e("ul",[e("li",[e("code",[v._v('ssh-keygen -t rsa -C "au@163.com"')]),v._v('："au@163.com" 是你自己的邮箱')]),v._v(" "),e("li",[v._v("如果不需要加密码的话，连续 3 个回车，就能得到 "),e("code",[v._v("id_rsa")]),v._v(" 和 "),e("code",[v._v("id_rsa.pub")]),v._v(" 文件")])])]),v._v(" "),e("li",[e("p",[v._v("添加密钥到 "),e("code",[v._v("ssh-agent")])]),v._v(" "),e("blockquote",[e("p",[v._v("确保 ssh-agent 是可用的")])]),v._v(" "),e("ul",[e("li",[e("code",[v._v("ssh-add ~/.ssh/id_rsa")]),v._v(",添加生成的 SSH key 到 ssh-agent")])])]),v._v(" "),e("li",[e("p",[v._v("登陆 Github, 添加 ssh")]),v._v(" "),e("blockquote",[e("p",[v._v("点击右上角头像 -> Settings -> SSH and GPG Keys")])])])]),v._v(" "),e("p",[v._v("将刚才生成的 id_rsa.pub 里面的内容拷贝到这里，新增一个 New SSH key"),e("br"),v._v(" "),e("img",{attrs:{src:"https://raw.githubusercontent.com/coderlyu/au-blog/master/docs/.vuepress/public/images/blogs/git-1.png",alt:"图片"}})]),v._v(" "),e("h2",{attrs:{id:"常见问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[v._v("#")]),v._v(" 常见问题")]),v._v(" "),e("h3",{attrs:{id:"git-clone-xxx-项目克隆下来之后-使用-git-remote-v-查看-没有远程库的地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-clone-xxx-项目克隆下来之后-使用-git-remote-v-查看-没有远程库的地址"}},[v._v("#")]),v._v(" git clone xxx 项目克隆下来之后 使用 git remote -v 查看 没有远程库的地址")]),v._v(" "),e("p",[e("code",[v._v("GitHub")]),v._v(" 未添加当前电脑的 "),e("code",[v._v("ssh")]),v._v("，登陆"),e("code",[v._v("Github")]),v._v(", 添加 "),e("code",[v._v("ssh")]),v._v(" 即可")]),v._v(" "),e("h3",{attrs:{id:"git-pull-出错"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-pull-出错"}},[v._v("#")]),v._v(" git pull 出错")]),v._v(" "),e("p",[v._v("可能的原因有：")]),v._v(" "),e("ul",[e("li",[v._v("存在冲突，需要你手动去解决冲突的问题")])])])}),[],!1,null,null,null);_.default=i.exports}}]);